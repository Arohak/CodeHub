# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

app_name        = "CodeHub"
app_path        = "./build"

target          = "#{app_name}"
plist_path      = "./#{app_name}/Resources/Info.plist"

# firebase
firebase_id     = "1:634804401538:ios:157d41663bc6af35dd8b9b"
firebase_link   = "https://console.firebase.google.com/u/0/project/brilliant-fire-5806/appdistribution/app/ios:com.arohak.codehub/releases"

# slack
slack_url       = "https://hooks.slack.com/services/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"    # Aro for testing

platform :ios do

  lane :test_notify do
    notify_slack(title: "Testing Fastlane", title_link: "title_link", version: "version")
  end

  # used to upload builds to fabric
  lane :firebase do |params|
    private_firebase(params)
  end

  # used to upload builds to testflight
  lane :test do |params|
    private_testflight(params)
  end

  # used to upload builds to app store
  lane :store do |params|
    private_appstore(params)
  end

end

private_lane :private_firebase do |params|
    scheme = "#{target} Dev"
    output = "#{target}.ipa"

    # version bump
    inc_build_number()
    # increment_version_minor

    # enable automatic code signing
    enable_automatic_code_signing

    # build app
    build_app(
        scheme:             scheme,
        export_method:      "development",
        configuration:      "Debug",
        output_name:        output,
        output_directory:   app_path,
        build_path:         app_path,
        buildlog_path:      app_path,
        silent:             true,
        clean:              true,
        export_xcargs:      "-allowProvisioningUpdates",
        # skip_build_archive: true,
        # archive_path:       "#{app_path}/#{target}.xcarchive", # should change build/*.xcarchive name to 'MG2_AT.xcarchive'
    )

    # upload to firebase
    firebase_app_distribution(
        app:                firebase_id,
        groups:             params[:group] ? params[:group] : "Testers",
        release_notes:      params[:notes] || "Latest Beta build",
        firebase_cli_path:  "/usr/local/bin/firebase",
        ipa_path:           "#{app_path}/#{target}.ipa"
    )

    # notify slack
    title = "#{target} build has been uploaded to the Firebase!"
    version = "#{version()}(#{bundleVersion()})"
    notify_slack(title: title, title_link: firebase_link, version: version)
end

private_lane :private_testflight do |params|
    scheme = "#{target} Prod"
    output = "#{target}.ipa"

    # version bump
    inc_build_number()

    # enable automatic code signing
    enable_automatic_code_signing

    # build app
    build_app(
        scheme:             scheme,
        output_name:        output,
        output_directory:   app_path,
        build_path:         app_path,
        buildlog_path:      app_path,
        silent:             true,
        clean:              true
    )

    # upload to testflight
    upload_to_testflight(
        username: params[:username],
        skip_submission: true,
        skip_waiting_for_build_processing: true
    )

    # notify slack
    fullVersion = "#{version()}(#{bundleVersion()})"
    notify_slack(message: "#{target} build has been uploaded to the Testflight!", version: fullVersion)
end

private_lane :private_appstore do |params|
    scheme = "#{target} Prod"
        
    # version bump
    inc_build_number()

    # enable automatic code signing
    enable_automatic_code_signing

    # build app
    build_app(
        scheme:     scheme
    )

    # upload to appstore
    appstore(
        username:           params[:username],
        skip_screenshots:   true,
        skip_metadata:      true,
        force:              true,
    )

    # notify slack
    fullVersion = "#{version()}(#{bundleVersion()})"
    notify_slack(message: "#{target} build has been uploaded to the AppStore!", version: fullVersion)
end

private_lane :version do
    version = get_info_plist_value(path: plist_path, key: "CFBundleShortVersionString")
    version
end

private_lane :bundleVersion do 
    bundle = get_info_plist_value(path: plist_path, key: "CFBundleVersion")
    bundle
end

private_lane :inc_build_number do |params|
    new_version = params[:version] || version()
    new_build   = params[:build] || (bundleVersion().to_i + 1).to_s

    puts "current: #{version()}(#{bundleVersion()}), new: #{new_version}(#{new_build})"

    set_info_plist_value(path: plist_path, key: "CFBundleShortVersionString", value: new_version)
    set_info_plist_value(path: plist_path, key: "CFBundleVersion", value: new_build)
end

private_lane :increment_build do
    increment_build_number
    commit_version_bump
end

private_lane :increment_version_patch do
    increment_version_number(
        bump_type: "patch"
    )
    increment_build
end

private_lane :increment_version_minor do
    increment_version_number(
        bump_type: "minor"
    )
    increment_build
end

private_lane :increment_version_major do
    increment_version_number(
        bump_type: "major"
    )
    increment_build
end

private_lane :notify_slack do |params|
    slack(
        slack_url:              slack_url,
        payload:                { Version: params[:version]},
        default_payloads:       [:git_branch],
        attachment_properties: { 
          title:        params[:title],
          title_link:   params[:title_link]
        }
    )
end
